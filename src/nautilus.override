/* -*- Mode: C; c-basic-offset: 4 -*-
 * Copyright (C) 2004  Johan Dahlin
 *
 *   nautilus.override: overrides for the nautilus extension library
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
 * USA
 */
%%
headers
#define NO_IMPORT_PYGOBJECT
#include "pygobject.h"

#include <libnautilus-extension/nautilus-file-info.h>
#include <libnautilus-extension/nautilus-info-provider.h>
#include <libnautilus-extension/nautilus-column-provider.h>
#include <libnautilus-extension/nautilus-location-widget-provider.h>
#include <libnautilus-extension/nautilus-menu-provider.h>
#include <libnautilus-extension/nautilus-property-page-provider.h>
#include <libnautilus-extension/nautilus-menu.h>

static PyObject *
_glist_to_pyobject (GList *list)
{
	GList *l;
	PyObject *item, *py_ret;

	py_ret = PyList_New (0);

	for (l = list; l != NULL; l = l->next)
	{
		item = pygobject_new ((GObject *)l->data);

		if (item == NULL)
		{
			Py_DECREF (py_ret);
			return NULL;
		}

		PyList_Append (py_ret, item);
		Py_DECREF (item);
	}

	return py_ret;
}

%%
modulename nautilus
%%
import gobject.GObject as PyGObject_Type
import gtk.Widget as PyGtkWidget_Type
import gtk.Window as PyGtkWindow_Type
%%
ignore-glob
  *_get_type
%%
define NautilusMenu.get_items
static PyObject *
_wrap_nautilus_menu_get_items(PyGObject *self)
{
    GList *ret;
    
    if(self == NULL)
    {
        Py_INCREF(Py_None);
        return Py_None;
    }
    
    ret = nautilus_menu_get_items(NAUTILUS_MENU(self->obj));
    if (ret) {
        PyObject *py_ret = _glist_to_pyobject(ret);
        return py_ret;
    }
    
    Py_INCREF(Py_None);
    return Py_None;
}
%%
define NautilusInfoProvider.update_complete_invoke kwargs
static PyObject *
_wrap_nautilus_info_provider_update_complete_invoke(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "provider", "handle", "closure", "result", NULL };
    PyObject *py_closure, *py_handle, *py_result;
    PyGObject *py_provider;
    GClosure *closure;
    NautilusOperationHandle *handle;
    NautilusOperationResult result = NAUTILUS_OPERATION_COMPLETE;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O!OO|O:NautilusInfoProvider.update_complete_invoke", kwlist,
            &PyNautilusInfoProvider_Type, &py_provider, 
            &py_handle, &py_closure, &py_result))
    {
        return NULL;
    }

    closure = pyg_boxed_get(py_closure, GClosure);
    handle = pyg_pointer_get(py_handle, NautilusOperationHandle);
    if (py_result != NULL)
        result = (NautilusOperationResult)py_result;

    nautilus_info_provider_update_complete_invoke(closure, 
        NAUTILUS_INFO_PROVIDER(py_provider->obj), handle, result);

    Py_INCREF(Py_None);
    return Py_None;
}
